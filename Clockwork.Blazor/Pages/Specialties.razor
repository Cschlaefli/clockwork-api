@page "/specialties"
@using System.Net.Http
@inject HttpClient Http
@using Clockwork.Models
@using BlazorPagination

@if (_data == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="d-flex justify-content-between">
    <BlazorPager CurrentPage="@_data.CurrentPage"
            PageCount="@_data.PageCount"
            OnPageChanged="(async e => { _page = e; await GetData();})"

            ShowFirstLast="false"
            ShowPageNumbers="true"
            VisiblePages="@visPages"
            NextText=">"
            PreviousText="<"/>
    </div>
    <table class="table">
        <tbody>
        @foreach (var item in _data.Results)
        {
        <tr>
            <SpecialtyDetail specialty=@item/>
        </tr>
        }
        </tbody>
    </table>
    <div class="d-flex justify-content-between">
    <BlazorPager CurrentPage="@_data.CurrentPage"
            PageCount="@_data.PageCount"
            OnPageChanged="(async e => { _page = e; await GetData();})"

            ShowFirstLast="false"
            ShowPageNumbers="true"
            VisiblePages="@visPages"
            NextText=">"
            PreviousText="<"/>
    </div>
}

@code {

    public int visPages = 10;

    private PagedResult<Specialty> _data;
    protected override async Task OnInitializedAsync(){

        await GetData();
    } 

    private string slug = "api/Specialty";
    private int _page = 1;
    private int _page_size = 30;
    private int _page_count = 0;
    private int _records = 0;
    private async Task GetData()
    {
        _records = await Http.GetFromJsonAsync<int>($"{slug}/count");
        _page_count = (_records + _page_size -1)/_page_size;

        _data = new PagedResult<Specialty>() { 
            CurrentPage = _page,
            PageSize = _page_size,
            PageCount = _page_count
            };
        _data.Results = await Http.GetFromJsonAsync<Specialty[]>($"{slug}/{_page}/{_page_size}");
        _data.RowCount = _data.Results.Count();

        StateHasChanged();
    }

}